<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring_MVC]]></title>
    <url>%2F2019%2F08%2F15%2FSpring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[流程图解.其中DispatcherServlet是SpringMVC中的核心.是前端控制器.相当于工地里的包工头.也相当于一个中转站 1、 用户发送请求至前端控制器DispatcherServlet。 2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。 3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。 4、 DispatcherServlet调用HandlerAdapter处理器适配器。 5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。 6、 Controller执行完成返回ModelAndView。 7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。 8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。 9、 ViewReslover解析后返回具体View。 10、 DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。 11、 DispatcherServlet响应用户。SpringMVC快速开发. 1.需要导入相关jar包 2.在web.xml中,配置前端控制器. 3.在web.xml中配置完成后.需要在Spring_mvc.xml中配置.前端控制器的参数设置. 4.做完如上的操作以后,前端控制器便配置成功了.现在还需要的就是Controller了,在需求的类上,加上注解@Controller,此时,并不是该类就是一个完整的Controller还需要在类名或者类标签处加上RequestMapping,这样以来,才是一个真正的Controller,如下. 5.大多时候.我们把SpringMVC的配置信息,交给Spring_mvc.xml来处理,其他的Spring的配置信息,交给Spring的application.xml来配置. 所以在配置两个配置文件的时候,注意在扫描组件的时候,Controller应该配置在Spring_mvc.xml中,其余对象交给SpringIOC容器来处理,扫描组件配置在applicationContext.xml中. 6.配置完成后.配置好服务器,启动服务器,输入访问请求,其中RequestMapping后的/transfer是访问对应的Controller中的该方法.这样就可以执行这个方法了,然后返回的model和view会由视图解析器处理好以后,跳转到返回的指定页面.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Spring_AOP]]></title>
    <url>%2F2019%2F08%2F12%2FAOP%2F</url>
    <content type="text"><![CDATA[Spring-AOP 1.JDK代理只能针对实现了接口的类以反射的方式生成代理，而不能针对类 ，所以也叫“接口代理” 2.CGLIB是针对类实现代理的，主要对指定的类以字节码转换的方式（ASM框架）生成一个子 类，并重写其中的方法。 因为是创建目标类的子类，所以目标类必须要有无参构造函数（子类的有参构造函数会调用父类无参），否则报错,并且目标类不能被final修饰.否则报错.通过Spring配置文件的方式,用AOP来实现功能增强. 首先.需要在配置文件中引入命名空间. 然后让IOC来管理自己的切面类和目标类.所以 这样以来,容器中便有了两个对应类对象,但是Spring并不知道.我们定义的什么类,应该作为我们的切面类,所以需要在配置文件中定义. 其中,&lt;aop:aspect ref=&quot;myaspect&quot;&gt;标签中,声明哪一个类作为切面类,ref对应的是切面类的对象.这样做以后.Spring便会知道以哪一个类来作为切面类. 织入通知,分为五种,分别有: 1.before:前置通知,在切点方法执行前执行. 2.after-returning:后置通知,在切点方法执行后执行. 3.after-throwing:异常通知,在切点方法抛出异常后执行. 4.around:环绕通知,在切点方法执行前执行,执行后也执行,也可以称为自定义通知. 5.after:最终通知,不管如何最后都会执行的通知. 然后是标签中的method,表示了使用切面类中,哪一个增强方法来增强后面pointcut切点中的哪一个方法. 如果将来,需要增强的切点方法不变.如果多次,重复的这样写需要增强的切点方法的话,会不方便,所以我们应该将需要增强的切点方法抽取出来.如下: 然后在切点引入就可以了.总结 第一步先导入命名空间. 第二步在IOC中实例化切面类对象和目标类对象. 第三步在配置文件中声明切面类. 第四步,织入.注解实现AOP 首先.同配置一样.我们需要让Spring中的IOC来管理对象.则我们需要在切面类和目标类上加上注解@Component(&quot;哪一个类,类似于id&quot;) 之后,需要在告诉Spring,哪一个类作为切面类,但是因为不是配置文件,所以有一个注解是@Aspect的,该注解可以声明该类为切面类. 接下来,只需要在切面类中,在需要执行的增强方法上边,加上对应的类型,如前置增强,后置增强,最终增强..... 这一切做完以后,并不能直接测试运行.因为Spring的IOC中,并没有这些配置信息. 需要在配置文件中,打开自动代理和扫描组件. 注意一下,在AOP的织入方法类型中,Around,环绕通知,比较特殊,相当于是自定义增强方法,但是该方法需要传递一个参数,如图: 参数意义,需要一个正在执行的连接点,连接点即有资格成为切入点的点,即方法,正在执行的连接点,即切点,在方法中直接调用proceed()方法执行该切点方法. proceed方法就是用于启动目标方法执行的. 这是around类型和前置后置的区别,这样在执行方法前后,便可以自定义执行需要增强的操作 三、注意事项 当使用jdk代理的时候，经常会发生一个错误： java.lang.ClassCastException: com.sun.proxy.$Proxy7 cannot be cast to XXXXX 解析：明显这是jdk代理对象转换的错误，而从上面可以知道jdk代理是根据目标类的接口生成一个继承这些接口的类对象，当使用容器调出对象的时候就是代理对象与目标对象同级，所以二者之间不能强制转换，声明类应该为他们俩共有的接口类，如果声明成目标类，则会报出以上的错误。 ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(“applicationContext.xml”);Dao dao = (Dao) ac.getBean(“dao”); // 报错 解决：方法1、将声明类改为目标对象的接口。 IDao dao = (IDao) ac.getBean(“dao”); 方法2,使用cglib来代理目标对象,既可以让声明类为目标类.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Spring注解开发&Spring继承junit]]></title>
    <url>%2F2019%2F08%2F11%2Fpring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[@Component.该注解加在需要实例化的对象的实现类上面.该注解等于了之前spring配置文件中的如:注入的注解是两个,分别为.@Autowired和@Qualifier.在需要注入的对象上.加上该注解.在@Qualifier(“”)的括号中,填写对应的注入值.如:表示把我之前创建的一个标识为userdao的userdao对象注入给该类中的Userdao对象. spring注解: Spring集成junit1.导入坐标配置环境.2.指定谁来执行,依靠什么标准(配置文件)来执行.]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring创建数据源]]></title>
    <url>%2F2019%2F08%2F11%2Fpring%E6%95%B0%E6%8D%AE%E6%BA%90%2F</url>
    <content type="text"><![CDATA[数据源开发步骤. 1.导入驱动坐标.2.导入连接池坐标.3.测试(c3p0)控制台打印. 测试(druid) 以上因为.手动设置数据库连接池中字符串会经常改变.所以应该通过加载配置文件的方式来创建连接池对象c3p0druidSpring创建数据源. 首先.创建环境.导入spring坐标,创建spring配置文件. 配置文件中.之前要创建数据库连接池对象.这里可以使用spring容器为我们创建.创建以后.设置参数,可以依靠spring的注入来设置.需要注意的是配置文件xml中.特殊符号需要转意.如&amp;需要转意为&amp;之后在测试.在我们使用spring配置文件,来帮我们创建数据源的时候,配置文件xml中,注入需要写入大量字符串.我们也可以采用加载配置文件的方法.来直接获取配置文件中的键值.需要再spring配置文件中添加命名空间然后,再注入时,可以采用像el,jstl再jsp页面中那样这里.特别注意.在获取用户名的值的时候.${username}会被解析成对应的电脑名.这样在测试中.相当于是电脑名再访问数据库,而数据库中没有这个用户,所以会报错,所以我们可以修改配置文件中的username再前面加上对应的数据源.如：${c3p0.username};]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring]]></title>
    <url>%2F2019%2F08%2F09%2Fpring%2F</url>
    <content type="text"><![CDATA[Spring是分层的Java EE/SE应用full-stack轻量级开源框架,以IOC和AOP为内核. Spring的优势: 1.方便解耦,简化开发. 2.AOP编程的支持. 3.声明事务的支持. 4.方便程序的设计. 5.方便各种框架的集成. 6.降低JavaEE API的使用难度. 7.开源代码学习思想.Spring当中创建对象的四种方式. 1.无参构造的方式. 2.静态工厂的方式. 配置文件配置静态工厂的bean标签中.id为需求获取对象的标识,在以后通过上下文对象.getBean(id).就会通过该id,去找到静态工厂类,发现其中的静态方法,该方法返回一个需求的对象. 3.实例工厂的方式. 4.有参构造的方式.Spring当中创建对象的范围 其中prototype是多例,创建出来的对象,有不同的地址,为不同的对象. singleton是单例的,创建出来的对象是同一个,其中配置默认的是singleton.Spring当中的依赖注入. 常用的通过JavaBean中的set方法,用set注入的方式 配置set注入的时候,id和class不做解释,一个是唯一标识,一个是全类名,property标签,代表其中的属性,name代表属性名,并不是成员变量,而是类属性,是set方法后的字段名首字母小写,ref代表注入对象的类型是对象,是一个引用类型,如果注入的是普通类型的话,就用value来代替ref. 通过有参构造的方式,注入. 配置有参注入的时候,id和class不做解释,一个是唯一标识,一个是全类名,需要注意的是因为是有参构造,所以需要constructor-arg标签,其中name代表的是参数的名字,ref代表了参数需求的类型是一个引用类型,标签中的name属性可以改为index,代表了有参构造中的第几个参数. ApplicationContext配置文件中的import标签. 如果再以后,进行大项目的开发当中,配置文件中的配置信息会很多,维护起来会很麻烦,而且不方便阅读,所以采用了import导入其他配置文件的方法,这样配置文件方便阅读,维护起来也方便维护. Spring当中普通类型的注入方式.]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AJAX&JSON]]></title>
    <url>%2F2019%2F07%2F28%2FJAX%2F</url>
    <content type="text"><![CDATA[AJAX： 1. 概念： ASynchronous JavaScript And XML 异步的JavaScript 和 XML 1. 异步和同步：客户端和服务器端相互通信的基础上 * 客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。 * 客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。 Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 [1] 通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。 提升用户的体验 2. 实现方式： 1. 原生的JS实现方式（了解） //1.创建核心对象 var xmlhttp; if (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); } else {// code for IE6, IE5 xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); } //2. 建立连接 /* 参数： 1. 请求方式：GET、POST * get方式，请求参数在URL后边拼接。send方法为空参 * post方式，请求参数在send方法中定义 2. 请求的URL： 3. 同步或异步请求：true（异步）或 false（同步） */ xmlhttp.open(&quot;GET&quot;,&quot;ajaxServlet?username=tom&quot;,true); //3.发送请求 xmlhttp.send(); //4.接受并处理来自服务器的响应结果 //获取方式 ：xmlhttp.responseText //什么时候获取？当服务器响应成功后再获取 //当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。 xmlhttp.onreadystatechange=function() { //判断readyState就绪状态是否为4，判断status响应状态码是否为200 if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) { //获取服务器的响应结果 var responseText = xmlhttp.responseText; alert(responseText); } } 2. JQeury实现方式 1. $.ajax() * 语法：$.ajax({键值对}); //使用$.ajax()发送异步请求 $.ajax({ url:&quot;ajaxServlet1111&quot; , // 请求路径 type:&quot;POST&quot; , //请求方式 //data: &quot;username=jack&amp;age=23&quot;,//请求参数 data:{&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23}, success:function (data) { alert(data); },//响应成功后的回调函数 error:function () { alert(&quot;出错啦...&quot;) },//表示如果请求响应出现错误，会执行的回调函数 dataType:&quot;text&quot;//设置接受到的响应数据的格式 }); 2. $.get()：发送get请求 * 语法：$.get(url, [data], [callback], [type]) * 参数： * url：请求路径 * data：请求参数 * callback：回调函数 * type：响应结果的类型 3. $.post()：发送post请求 * 语法：$.post(url, [data], [callback], [type]) * 参数： * url：请求路径 * data：请求参数 * callback：回调函数 * type：响应结果的类型 JSON： 1. 概念： JavaScript Object Notation JavaScript对象表示法 Person p = new Person(); p.setName(“张三”); p.setAge(23); p.setGender(“男”); var p = {&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;}; * json现在多用于存储和交换文本信息的语法 * 进行数据的传输 * JSON 比 XML 更小、更快，更易解析。 2. 语法： 1. 基本规则 * 数据在名称/值对中：json数据是由键值对构成的 * 键用引号(单双都行)引起来，也可以不使用引号 * 值得取值类型： 1. 数字（整数或浮点数） 2. 字符串（在双引号中） 3. 逻辑值（true 或 false） 4. 数组（在方括号中） {&quot;persons&quot;:[{},{}]} 5. 对象（在花括号中） {&quot;address&quot;:{&quot;province&quot;：&quot;陕西&quot;....}} 6. null * 数据由逗号分隔：多个键值对由逗号分隔 * 花括号保存对象：使用{}定义json 格式 * 方括号保存数组：[] 2. 获取数据: 1. json对象.键名 2. json对象[&quot;键名&quot;] 3. 数组对象[索引] 4. 遍历 //1.定义基本格式 var person = {&quot;name&quot;: &quot;张三&quot;, age: 23, &apos;gender&apos;: true}; var ps = [{&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true}, {&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 24, &quot;gender&quot;: true}, {&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 25, &quot;gender&quot;: false}]; //获取person对象中所有的键和值 //for in 循环 /* for(var key in person){ //这样的方式获取不行。因为相当于 person.&quot;name&quot; //alert(key + &quot;:&quot; + person.key); alert(key+&quot;:&quot;+person[key]); }*/ //获取ps中的所有值 for (var i = 0; i &lt; ps.length; i++) { var p = ps[i]; for(var key in p){ alert(key+&quot;:&quot;+p[key]); } } 3. JSON数据和Java对象的相互转换 * JSON解析器： * 常见的解析器：Jsonlib，Gson，fastjson，jackson 1. JSON转为Java对象 1. 导入jackson的相关jar包 2. 创建Jackson核心对象 ObjectMapper 3. 调用ObjectMapper的相关方法进行转换 1. readValue(json字符串数据,Class) 2. Java对象转换JSON 1. 使用步骤： 1. 导入jackson的相关jar包 2. 创建Jackson核心对象 ObjectMapper 3. 调用ObjectMapper的相关方法进行转换 1. 转换方法： * writeValue(参数1，obj): 参数1： File：将obj对象转换为JSON字符串，并保存到指定的文件中 Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中 OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中 * writeValueAsString(obj):将对象转为json字符串 2. 注解： 1. @JsonIgnore：排除属性。 2. @JsonFormat：属性值得格式化 * @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;) 3. 复杂java对象转换 1. List：数组 2. Map：对象格式一致]]></content>
  </entry>
  <entry>
    <title><![CDATA[Cookie]]></title>
    <url>%2F2019%2F07%2F20%2Fookie%2F</url>
    <content type="text"><![CDATA[概念: 客户端会话技术,将数据保存到客户端浏览器.实现: 本质上cookie是通过设置响应头.来告诉浏览器,共享数据的内容,浏览器保存下来.然后下次请求的时候服务器通过request获得请求头里的cookie信息. 还可以通过来创建cookie和获取cookie&lt;!--more--&gt; 细节 一次可不可以发送多个cookie? * 可以 * 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。 cookie在浏览器中保存多长时间？ *默认情况下，当浏览器关闭后，Cookie数据被销毁 *持久化存储： * setMaxAge(int seconds) 1.正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效 2. 负数：默认值 3. 零：删除cookie信息 cookie能不能存中文？ * 在tomcat 8 之前 cookie中不能直接存储中文数据。 * 需要将中文数据转码---一般采用URL编码(%E3) * 在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储,URL解码解析 1. cookie共享问题？ 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？ * 默认情况下cookie不能共享 * setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录 * 如果要共享，则可以将path设置为&quot;/&quot; 2. 不同的tomcat服务器间cookie共享问题？ * setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享 * setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享Cookie的特点和作用 1. cookie存储数据在客户端浏览器 2. 浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个) * 作用： 1. cookie一般用于存出少量的不太敏感的数据 2. 在不登录的情况下，完成服务器对客户端的身份识别]]></content>
  </entry>
  <entry>
    <title><![CDATA[Session]]></title>
    <url>%2F2019%2F07%2F20%2Feesion%2F</url>
    <content type="text"><![CDATA[概念: 服务器端会话技术,在一次会话的多次请求间共享数据,将数据保存在服务器中.获取: 通过request.getSession()来获取,通过setAttribute(String s,Object obj),来设置共享数据的消息内容. 如图,客户端,在第一次和服务器产生会话的时候,服务器第一次接收到客户端浏览器的请求的时候,服务器会产生一个响应头cookie,值为JSESSIONID的一串响应给客户端浏览器,浏览器在接收到JSESSIONID后,会作为cookie保存起来, 在接下来的请求中,客户端浏览器会把JSESSIONID作为请求头,发送给服务器,服务器在收到此请求头后,会去匹配对应的session数据,实现数据共享.个人理解: 服务器,在和客户端浏览器第一次产生会话的时候,便会在服务器内部为会话开辟一块空间,同时生成对应的JSESSIONID,这块空间用来存放这次会话的数据,为了让接下来的请求响应能够共享这次会话的数据信息,所以,为此次会话生成了一个JSESSIONID,JSESSIONID也就是一个cookie,只不过,服务器把他响应给了浏览器,浏览器保存下来以后作为请求头再发起请求,这样接下来的请求响应过程中,服务器便会知道这个JSESSIONID对应了空间中那一块Session,然后得到这个Session中的数据,这样数据就可以共享了.所以Session的实现是依赖于cookie的.细节: 当客户端关闭,服务器端开启,两次获取的session是同一个吗? *默认情况下不是同一个,因为客户端关闭,意味着会话结束,第二次客户端的会话将会是另外一个session对象了 * 如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。 Cookie c = new Cookie(&quot;JSESSIONID&quot;,session.getId()); c.setMaxAge(60*60); response.addCookie(c); 当客户端开启,服务器端关闭,两次获取的session是同一个吗? * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作 * session的钝化： * 在服务器正常关闭之前，将session对象系列化到硬盘上 * session的活化： * 在服务器启动后，将session文件转化为内存中的session对象即可。 session什么时候销毁? 1. 服务器非正常关闭. 2. session对象调用invalidate()方法。 3. session默认失效时间 30分钟 选择性配置修改 &lt;session-config&gt; &lt;session-timeout&gt;30&lt;/session-timeout&gt; &lt;/session-config&gt;session和cookie的区别: 1. session存储数据在服务器端，Cookie在客户端 2. session没有数据大小限制，Cookie有 3. session数据安全，Cookie相对于不安全 session的特点 1. session用于存储一次会话的多次请求的数据，存在服务器端 2. session可以存储任意类型，任意大小的数据]]></content>
  </entry>
  <entry>
    <title><![CDATA[会话技术]]></title>
    <url>%2F2019%2F07%2F20%2F%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[概述: ## 会话技术 1. 会话：一次会话中包含多次请求和响应。 * 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止 2. 功能：在一次会话的范围内的多次请求间，共享数据 3. 方式： 1. 客户端会话技术：Cookie 2. 服务器端会话技术：Session]]></content>
  </entry>
  <entry>
    <title><![CDATA[实现图片,视频文件下载]]></title>
    <url>%2F2019%2F07%2F20%2F%E7%8E%B0%E5%9B%BE%E7%89%87-%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[其中,获取真是路径哪里,注意自己去web工程项目下面看,是否真的存放有资源路径下的文件.容易报错.出现系统访问路径不存在.]]></content>
      <categories>
        <category>undefined</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ServletContext对象笔记]]></title>
    <url>%2F2019%2F07%2F19%2FervletContext%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[概念:代表整个web工程,可以和服务器通信. 获取:request.getServletContext()/this.getServletContext(). 功能: 获取MIME类型: *MIME类型:在互联网通信过程中定义的一种文件数据类型. 格式: 大类型/小类型 如text/html image/jpeg 域对象,共享数据: *作用范围广,整个web工程. 获取文件的真实路径: *通过Context.getrealPath(String s)来获取文件真实路径,其中,参数代表web根目录下的资源路径,如果资源路径再某个文件夹下,则应在加上对应的(/文件夹名称/资源名称). ★特别注意,资源路径如果在src下,因为src下的文件通过编译过后最后会在/WEB-INFO/classes下,所以在获取src下资源的真实路径时,应该写成(/WEB-INFO/classes/资源名称). Context.getrealPath(String s)本质上,是在做字符串的拼接,web根目录拼接上参数中的字符串.]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Response对象笔记]]></title>
    <url>%2F2019%2F07%2F19%2F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Response重定向的方法,和路径填写. 注意,转发因为实在服务器内部发生资源跳转,所以不需要写绝对路径,相对路径即可.Response字符输出流,注意设置编码格式防止中文乱码,获取流的默认格式是ISO-8859-1的 注意,再获取流对象之前,设置编码,而不是再之后设置编码.Response字节输出流,设置编码格式,防止中文乱码,同字符输出流相同,只不过字节流可以输出更多东西.]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Response]]></title>
    <url>%2F2019%2F07%2F18%2FResponse%2F</url>
    <content type="text"><![CDATA[响应消息: 格式:响应行,响应头,响应空行,响应体. 响应行: 协议/版本,状态码 状态码:服务器告诉客户端浏览器本次请求和响应的状态. *分类: 第一类:1xx,服务器接收客户端消息,但没有接受完成,等待一段时间后,发送1xx状态码. 第二类:2xx,成功! 第三类:3xx,重定向,302代表资源跳转,304,缓存. 第四类:4xx,客户端错误.404代表请求路径没有对应的资源.,405代表请求方式没有对应的doxxx方法. 第五类:5xx,服务器错误.500代表服务器内部出现异常. 响应头: 格式:头名称 值 常见的响应头: Content-type:页面编码格式. Content-Length:字节数. Content-disposition: 服务器告诉客户端以什么格式打开响应体.默认值in-line:在当前页面打开. attachment:以附件形式打开,文件下载. Response设置响应消息: 设置响应行: 设置状态码:setStatus(int i). 设置响应头: setHeader(String name,String values)/(&quot;location&quot;,&quot;资源路径&quot;).这是重定向方法.需要加虚拟路径. 还有一种方法,Response.sendRidrect(&quot;资源路径&quot;).需要加虚拟路径. ★:重定向特点:两次请求,两次响应,不是内部跳转,而是服务器两次请求跳转.地址栏改变. 可以访问服务器外资源. 重定向不能使用request对象的共享数据. 设置相应体: 通过流,首先要获取流, 获取输出流, ★注意!解决乱码:response.setConentType(&quot;text/html;charset=utf-8&quot;); 第一种,字符流:Printer getWriter().不是实时打印.是一次响应完成后打印. 第二种,字节流:ServletOutputStream getOutputStream().]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet、HttpServlet、ServletRequest、HttpServletRequest/Response的联系和区别]]></title>
    <url>%2F2019%2F07%2F17%2Fervlet%E3%80%81HttpServlet%E3%80%81ServletRequest%E3%80%81HttpServletRequest%E3%80%81Request%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[最近在网上读到文章,理论上Servlet可以处理多种方式得请求和响应,http只是其中之一,那么,说明HttpServlet中的请求和响应,也是Servlet得其中之一,说明HttpServletrequest,和HttpServletresponse,是Servlet中得request和response得子类. 当然,继承父类,有父类得属性,之所以继承,肯定子类得有自己特有的东西,HttpServlet中,多了针对Http协议多种消息处理方法,例如,getHeader(),getSession()、getMethod()等等.. Servlet框架,这个框架是由java.servlet和javax.servlet.http,这两个包,组成得,再java.servlet中,规定了一个servlet类必须扩展和实现得通用接口和类.当以后别人问到你,一个servlet需要做什么,你就应该这么说.实现java.servlet包下得servlet接口并重写里面的方法,具体servlet接口分了子类,继承或者实现,取决于选择. Servlet的框架的核心是javax.servlet.Servlet接口,所有的Servlet都必须实现这一接口.在Servlet接口中定义了5个方法,其中有3个方法代表了Servlet的生命周期: init方法,在服务器开始的时候,初始化servlet对象,servlet对象是单例多线程得. service方法,负责响应客户的请求. destroy方法,结束servlet生命周期得方法.Servlet中重要的对象 ★ServletConfig: 获取途径:getServletConfig():该对象包含的方法有这几个... getServletName():返回一个字符串,用来获取该Servlet配置信息中得ServletName的,也就是web.xml配置的那个名字.. getInitParameter(String var1):获取在servlet中初始化参数的值。这里注意与全局初始化参数的区分。这个获取的只是在该servlet下的初始化参数.. getInitParameterNames():获取在Servlet中所有初始化参数的名字，也就是key值，可以通过key值，来找到各个初始化参数的value值。注意返回的是枚举类型.. 该方法返回的类型可以当作是一个迭代器,使用该类型对象方法来获取里面的值.. ★getServletContext():tomcat为每个web项目都创建一个ServletContext实例，tomcat在启动时创建，服务器关闭时销毁，在一个web项目中共享数据，管理web项目资源，为整个web配置公共信息等，通俗点讲，就是一个web项目，就存在一个ServletContext实例，每个Servlet都可以访问到它。 功能： 1. 获取MIME类型： * MIME类型:在互联网通信过程中定义的一种文件数据类型 * 格式： 大类型/小类型 text/html image/jpeg * 获取：String getMimeType(String file) * 域对象：共享数据 1. setAttribute(String name,Object value) 2.getAttribute(String name) 3. removeAttribute(String name) * ServletContext对象范围：所有用户所有请求的数据 3. 获取文件的真实(服务器)路径 1. 方法：String getRealPath(String path) 本质是字符串拼接. Context对象代表web工程的根目录,拼接参数中的资源路径. String b = context.getRealPath(&quot;/b.txt&quot;);//web目录下资源访问 System.out.println(b); String c = context.getRealPath(&quot;/WEB-INF/c.txt&quot;);//WEB-INF目录下的资源访问 System.out.println(c); String a = context.getRealPath(&quot;/WEB-INF/classes/a.txt&quot;);//src目录下的资源访问 System.out.println(a); 然后来说说Servlet的单例模式,一个Servlet只能被实例化一次,但是是多线程的,单例多线程,每个servlet类只能实例化自己一次,在服务器启动的时候,但是该实例化的对象会开启多个线程去使用,单例的好处,减少了GC的负担,但是需要注意数据共享的安全. 同步代码块:这样可以解决数据共享的问题,但是,同一时刻只能允许一个客户进行操作访问服务器,其余的需要排队等待,显然这是不可行的. 那么,如果再代码块中,避开实例变量,定义线程方法中的局部变量,这样互不影响,也就避免了数据共享的问题.推荐使用,用户也不用排队等待.Request对象/Response对象: 1.request原理:tomcat会通过请求url中的资源路径,去创建对应的Servlet的对象. 2.tomcat会创建两个对象,request对象中,封装请求数据消息. 3.tomcat将request和response对象传递给service方法,并且调用该方法. 4.程序员可以通过request对象,来获取请求消息数,可以通过设置response对象来设置响应消息. 5.从response中获取响应消息,返回给客户. request对象继承体系结构： ServletRequest -- 接口 | 继承 HttpServletRequest -- 接口 | 实现 org.apache.catalina.connector.RequestFacade 类(tomcat). * 方法： 1. 获取请求方式 ：GET * String getMethod() 2. (★)获取虚拟目录：/day14 * String getContextPath() 3. 获取Servlet路径: /demo1 * String getServletPath() 4. 获取get方式请求参数：name=zhangsan * String getQueryString() 5. (★)获取请求URI：/day14/demo1 * String getRequestURI(): /day14/demo1 * StringBuffer getRequestURL() :http://localhost/day14/demo1 * URL:统一资源定位符 ： http://localhost/day14/demo1 中华人民共和国 * URI：统一资源标识符 : /day14/demo1 共和国 6. 获取协议及版本：HTTP/1.1 * String getProtocol() 7. 获取客户机的IP地址： * String getRemoteAddr()其父类的方法. 2.获取请求头数据 *方法: (★)String getHeader(String name):通过请求头的名称获取请求头. Enumeration&lt;String&gt; getHeaderNames():获取所有请求头,返回的是枚举.可以理解为迭代器. 3.获取请求体数据 方法: 获取字符流数据.BufferedReader getReader() 获取字节流数据.ServletInputStreame getInputstream() 再从流对象中拿数据.其他功能: 获取请求参数 *String getParameter(String name):根据参数名称,获取参数值. *String [] getParameterValues(String name):作用于复选框. *Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称. *Map&lt;String,String[]&gt; getParameterMap():获取所有参数的Map集合. 使用方法如下: 如果出现乱码,在获取参数前,通过request.setCharacterEncoding(&quot;页面中的编码&quot;). 请求转发:一种在服务器内部的资源跳转方式. 步骤: 通过request.getRequestDispatcher(&quot;要跳转的servlet的路径&quot;).forward(req,reqs) 特点: 转发后的浏览器地址栏路径不会变化,再当前servlet的资源路径跳转. 因为是服务器内部转发,不能转发当前tomcat容器外的servlet.只能访问当前服务器内部的servlet,所以方法参数中的路径不用加上虚拟路径. 转发是一次请求,多个资源之间使用的是同一次请求. 共享数据: 域对象.一个有作用范围的对象,可以在范围内共享数据. request域,代表一次请求,一般用于请求转发的多个资源中共享数据. 方法 setAttribute(String name,Object obj):储存数据. Object getAttribute(String name):通过键获取值. void removeAttribute(String name):通过键移除键值对. 获取ServletContext: ServletContext getServletContext():获取ServletContext对象.]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet体系结构]]></title>
    <url>%2F2019%2F07%2F15%2Fervlet-HTTP-Request%2F</url>
    <content type="text"><![CDATA[Servlet 本身是一个接口,里面包含了init,servi,destroy,getservletinfo,getservletconfig等方法,程序员需要去定义一个类,用来实现这个接口,重写里面的方法,来实现客户端的访问请求 原理:客户端发送url请求,服务器(Tomcat)接收请求以后,实例化Servlet对象(与此同时,会产生一个包含请求数据信息的Request对象),通过配置信息web.xml或者JDK6以上可以使用注解配置servlet中的url-patten,来寻找对应的serlvet,找到对应的servlet后,通过反射找到对应的实现类,然后去执行类中的service方法(Requset,Response),此时会产生Response对象,将处理过后包含请求的数据信息,响应给客户. GenericServlet 实现了Servlet接口的一个抽象类,里面重写了Servlet中的方法.其中,除了service(Requset,Response)方法是抽象方法外,其余的方法都是public,该类主要目的是为了减少代码,避免代码冗余,一开始程序员需要实现Servlet接口,必须重写其中的方法,但是借助中间类GenericServlet,该类实现了Servlet接口,重写了其中的方法,程序员只用继承该类,实现其中的service方法即可,这样一来,更方便,减少代码量,增加工作效率,用到那个方法,便去重写那个方法. HttpServlet 该抽象类,继承了GenericServlet这个类,其中有两个service方法.一个protect的service方 法,其中,两个方法需要的参数对象不同,但在public的service方法中,进行了向下转型,因为HttpServlet继承自GenericServlet,而GenericServlet又实现了Servlet接口,所以Servlet也是 HttpServlet的爷爷类,public方法中,把Servlet的Requst和Response对象,通过向下转型,强 转为HttpServlet的Requset和Response对象,然后再该方法中,调用本类中的protect的 service方法, 如下方法. 该方法中,封装了对请求信息的判断,判断其是get/post请求,然后根据判断结果.执行对应的doget和dopost方法,这样就不用再每一次都进行判断,而程序员只用写一个类,继承自HttpServlet,然后去重写其中的doget或者dopost方法,当服务器收到每次请求的时候,会自动去找父类GenericServlet中的public service方法,然后通过强转,执行protect service方法,然后通过方法中的判断去执行doget或者dopost方法,又因为程序员写的类继承了该类,重写了doget或者dopost方法,所以其实执行的是子类中的doget或dopost方法,这样就完成了想返回的响应请求和实现请求响应的过程… 特别注意!!! 当继承HttpServlet的子类中,如果重写了service方法,得看方法得参数,如果为ServletRequest和ServletResponse,那么服务器再收到请求以后,便不会去父类中,执行父类中的强转得service方法,而是直接执行子类中重写的该方法,然后执行该子类中service中对应得操作… 那么如果子类中,重写了参数为HttpRequest和Httpresponse得service方法,那么服务器在接收到请求以后,会先去父类中执行向下转型得service方法,然后再到子类中,执行该方法,接着执行该方法中对应得操作.]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet注解配置&HTTP]]></title>
    <url>%2F2019%2F07%2F15%2Fervlet%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Servlet3.0 支持注解配置,不用再去配置web.xml了, 创建web项目的时候,选择3.0以上,不用创建web.xml了(JDK6以后,开始支持) 定义一个类,实现servlet接口,重写接口中的方法, 在类上定义注解@webservlet(url-patten),便可以实现,不用web.xml来访问客户需要访问的资源. 同时,一个Servlet可以有多个访问路径,再注解配置中,可以如下配置,实现多个路径访问一个Servlet. 配置中.也可以有多层路径.如下 里边也可以写为/*,*为通配符,优先级最低.HTTP:也叫做超文本传输协议Hyper Text Transfer Protocol *定义了客户端和服务器通信时,发送数据的格式. *基于TCP/IP所以是安全的 *默认端口号80 *基于请求/响应模型:一次请求,对应一次响应. *无状态的:每次请求之间互相独立,不能交互数据. 历史版本: 1.0:每次请求响应都会建立连接. 1.1:复用连接.不在每次断开. 请求消息数据格式 1. 请求行 请求方式 请求url 请求协议/版本 GET /login.html HTTP/1.1 * 请求方式： * HTTP协议有7中请求方式，常用的有2种 * GET： 1. 请求参数在请求行中，在url后。 2. 请求的url长度有限制的 3. 不太安全 * POST： 1. 请求参数在请求体中 2. 请求的url长度没有限制的 3. 相对安全 2. 请求头：客户端浏览器告诉服务器一些信息 请求头名称: 请求头值 * 常见的请求头： 1. User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息 * 可以在服务器端获取该头的信息，解决浏览器的兼容性问题 2. Referer：http://localhost/login.html * 告诉服务器，我(当前请求)从哪里来？ * 作用： 1. 防盗链： 2. 统计工作： 3. 请求空行 空行，就是用于分割POST请求的请求头，和请求体的。 4. 请求体(正文)： * 封装POST请求消息的请求参数的 * 字符串格式： POST(请求方法) /login.html(请求的资源路径) HTTP/1.1(HTTP版本信息) Host: localhost(本机) User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0 (浏览器告诉服务器,访问使用的浏览器版本信息,解决了服务器的兼容性) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Referer: http://localhost/login.html Connection: keep-alive Upgrade-Insecure-Requests: 1 username=zhangsan]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet工作原理]]></title>
    <url>%2F2019%2F07%2F14%2Fervlet%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[Servlet接口定义了Servlet与servlet容器之间的契约。这个契约是：Servlet容器将Servlet类载入内存，并产生Servlet实例和调用它具体的方法。但是要注意的是，在一个应用程序中，每种Servlet类型只能有一个实例。 public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException { System.out.println(&quot;hello.servlet&quot;); } 当用户通过浏览器,输入url访问servlet容器时,即服务器,servlet容器也可以认为是Tomcat(个人理解),Tomcat/servlet容器,会自动实例化一个servlet对象,不需要程序员去创建对象,并且调用servlet中的该方法,注意此方法中需要两个形参.一个Request对象,一个Response对象. 于是我特意去搜了一下这两个对象,发现,服务器在接收到请求的时候,并不是只会自动生成servlet对象,还会生成一个Request对象,在这个对象中,包含了此次请求的数据信息,服务器在检索对应的servlet的时候,会将储存了此次请求信息的Request对象作为实际参数传给服务器的该方法,还有doGet方法和doPost方法. 即可以理解为,Request这个人去找要找的东西(包含的数据信息),服务器检索这些东西的时候,发现某个东西(该Request需要的东西),但是这个东西需要人来拿(即Request对象作为参数)于是服务器把这个Request对象作为实参传给了这个东西(方法)接下来,是Response对象. 服务器在处理完对应的servlet中的方法时,处理完请求数据后,会调用Response对象,把包含此次处理完对应的响应数据调用Response中的方法,响应给客户. Response对象的方法： response.setHeader(String key, String value);//在响应头中添加响应信息,但是同键会被覆盖 response.addHeader(String key, String value);//在响应头中添加响应信息,同键不会被覆盖 response.setContentType(“text/html;charset=utf-8”);//设置响应编码格式 response.sendError(int num, String msg&quot;);//自定义响应状态码 response.getWriter().write(String str);//响应具体的数据给客户端 说到这里,大家应该知道,服务器是怎么调用service方法的了吧.那么,服务器又是怎么知道用户访问的资源是哪一个的呢… 在服务器收到请求的时候,会通过web项目中,web.xml中配置的信息,来配对,]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet]]></title>
    <url>%2F2019%2F07%2F14%2FServlet%2F</url>
    <content type="text"><![CDATA[Servlet:server applet *概念:运行在服务器端的小程序. Servlet就是一个接口,定义了Java类被浏览器访问到(tomcat识别)的规则. 实现Servlet接口,复写方法. 狭义的讲servlet是一个待实现的接口,广义的讲servlet是任何一个实现了servlet这个接口的实现类.一般理解为后者. 快速入门: 创建JavaEE项目 定义一个类,实现Servlet接口,实现接口中的方法,配置Servlet,浏览器需要一个url来访问这个servlet,所以我们需要去配置一个url. 在web.xml中,配置,首先写一个 &lt;servlet&gt; &lt;servlet-name&gt;servlet名字&lt;/servlet-name&gt; &lt;servlet-class&gt;全类名&lt;/servlet-class&gt; &lt;/servlet&gt; 接下来写 &lt;servlet-mapping&gt; &lt;servlet-name&gt;servlet名字&lt;/servlet-name&gt; &lt;url-patten&gt;&lt;/url-patten&gt; &lt;/servlet-mapping&gt; Servlet的执行原理 客户端通过url中的localhost:8080(ip地址:8080端口)找到服务器,然后找到/后面的项目名称,接下来找到最后/的资源. 此时服务器会通过客户端发送过来的请求,去web.xml中,通过url-patten找是否有这一个资源,发现有则发现servlet-name(资源对应的servlet名字),然后通过&lt;servlet&gt;标签中的&lt;servlet-name&gt;找到对应的&lt;servlet-class&gt;,于是Tomcat通过反射把类的字节码文件加载进内存中class.forName(); 创建对象.class.newInstance(); 调用方法---service方法. 1.如果service()方法没有访问Servlet的成员变量也没有访问全局的资源比如静态变量、文件、数据库连接等，而是只使用了当前线程自己的资源，比如非指向全局资源的临时变量、request和response对象等。该方法本身就是线程安全的，不必进行任何的同步控制。 2. 如果service()方法访问了Servlet的成员变量，但是对该变量的操作是只读操作，该方法本身就是线程安全的，不必进行任何的同步控制。 3. 如果service()方法访问了Servlet的成员变量，并且对该变量的操作既有读又有写，通常需要加上同步控制语句。 4. 如果service()方法访问了全局的静态变量，如果同一时刻系统中也可能有其它线程访问该静态变量，如果既有读也有写的操作，通常需要加上同步控制语句。 5. 如果service()方法访问了全局的资源，比如文件、数据库连接等，通常需要加上同步控制语句。]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web服务器软件]]></title>
    <url>%2F2019%2F07%2F14%2FWeb%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[*服务器:安装了服务器软件的计算机. *服务器软件:接收用户请求,处理请求,做出响应. *web服务器:在web服务器中,可以部署web项目,让用户可以通过浏览器来访问. 常见的web服务器软件: webLogic:orcle公司,大型的JavaEE服务器,支持所有的JavaEE规范,收费. webSphere:IBM公司,大型的JavaEE服务器,支持所有的JavaEE规范,收费. JBOSS:JBOSS公司,大型的JavaEE服务器,支持所有JavaEE规范,收费. Tomcat:Apache基金组织,中小型的JavaEE服务器,支持少量JavaEE规范(servlet/jsp)开源,免费. 使用Tomcat服务器. 1:下载Tomcat: 2:安装Tomcat:解压下载下来的压缩包即可. 3:卸载:解压目录即可. 4:Tomcat目录结构: bin:可执行文件. conf:Tomcat的配置文件. lib:依赖jar包. logs:日志文件. temp:临时文件. webapps:存放web项目. work:存放运行时数据. 5: 启动Tomcat: *bin目录下有一个可执行文件startup.bat双击即可启动.(不要关闭控制台). 通过启动以后在浏览器输入localhost:8080即可访问. 配置. 1.直接将项目放到webapps下 *简化部署:将项目打包格式为war,将war包放在webapps目录下,会自动解压缩. 2.通过Tomcat配置文件server.xml在&lt;Host&gt;标签体中配置&lt;Context docBase=&quot;项目存放路径&quot; path=&quot;虚拟路径&quot;/&gt;.通过server.xml配置,不安全,需要重启Tomcat服务器. 3.在conf目录下有一个catalina文件,中有一个locahost,创建任意名称的xml配置文件,在文件中编写,&lt;Context docBase=&quot;项目存放路径&quot; /&gt;虚拟目录为,xml的名称.通过热部署,不需要重启Tomcat服务器,安全. *项目分为静态项目/动态项目: 目录结构 Java动态工程的目录结构: --项目的目录: --WEB--INF目录: --web.xml:web项目的核心配置文件. --classes目录:存放字节码文件的目录. --lib目录:放置依赖的jar包.]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web]]></title>
    <url>%2F2019%2F07%2F14%2FWeb%2F</url>
    <content type="text"><![CDATA[1.web相关概念回顾2.web服务器软件: Tomcat3.Servlet学习 软件架构 1.C/S:客户端/服务器端 2.B/S:浏览器(包含静态资源解析引擎)/服务器端 资源分类 1.静态资源 静态资源可以直接被浏览器解析. 如html,css,JavaScript 2.动态资源 动态资源被访问,先转换为静态资源.再返回给浏览器(这个动作被称为响应.),然后被解析. 如jsp,php,asp/servlet... 网络通信的三要素 1.IP:电子设备(计算机)在网络中的唯一标识. 2.端口:应用程序在计算机中的唯一标识.端口号的范围在,0~65536. 3.传输协议: tcp:经过三次握手,相对安全. udp:不需要握手,但是不安全.]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello world]]></title>
    <url>%2F2019%2F07%2F13%2FHello-world-I%2F</url>
    <content type="text"><![CDATA[Hi this is my first Blog!]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记.</tag>
      </tags>
  </entry>
</search>
